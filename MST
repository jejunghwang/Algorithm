#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <queue>
#include <map>
using namespace std;

class Disjoint {
private:
    struct node {
        unsigned id;
        unsigned rank;
        unsigned parent;
     
        node(unsigned _id) : id(_id), rank(0), parent(_id) {}

        bool operator != (const node& n) const {
            return this->id != n.id;
        }
    };

    vector<node> forest;
public:
    Disjoint(unsigned N) {
        forest.reserve(N);
    }

    void make_set(const unsigned& x) {
        forest.emplace_back(x);
    }

    unsigned find(unsigned x) {
        auto node_it = find_if(forest.begin(), forest.end(), [x](auto n) {return n.id == x; });
        unsigned node_id = (*node_it).id;

        while (node_id != forest[node_id].parent) {
            node_id = forest[node_id].parent;
        }
        return node_id;
    }

    void union_sets(unsigned x, unsigned y) {
        auto root_x = find(x);
        auto root_y = find(y);

        if (root_x == root_y) return;

        if (forest[root_x].rank > forest[root_y].rank)
            swap(root_x, root_y);
        forest[root_x].parent = forest[root_y].parent;
        forest[root_y].rank++;
    }
};
template<typename T>
struct edge {
    unsigned src;
    unsigned dst;
    T weight;

    inline bool operator< (const edge<T>& e) const {
        return this->weight < e.weight;
    }
    inline bool operator> (const edge<T>& e) const {
        return this->weight > e.weight;
    }
};

template<typename T>
class graph {
public:
    graph(unsigned N) :V(N) {}

    auto vertices() const { return V; }

    auto& edges() const { return edge_list; }

    auto edges(unsigned V) const {
        vector<edge<T>> edges_from_v;
        for (auto& e : edge_list) {
            if (e.src == V)
                edges_from_v.emplace_back(e);
        }
        return edges_from_v;
    }

    void add_edge(edge<T>&& e) {
        if (e.src >= 1 && e.src <= V && e.dst >= 1 && e.dst <= V)
            edge_list.emplace_back(e);
        else
            cerr << "Out Of Bound" << '\n';
    }

    template<typename U>
    friend ostream& operator<< (ostream & os, const graph<U>& G);

private:
    unsigned V;
    vector<edge<T>> edge_list;
};

template<typename U>
ostream& operator<< (ostream& os, const graph<U>& G) {
    for (unsigned i = 1; i < G.vertices(); i++) {
        os << i << ":\t";
        auto edges = G.edges(i);
        for (auto& e : edges)
            os << "{" << e.dst << ": " << e.weight << "}, ";
        os << '\n';
    }
    return os;
}

template<typename T>
graph<T> mst(const graph<T>& G) {
    priority_queue<edge<T>, vector<edge<T>>, greater<edge<T>>> edge_min_heap;

    for (auto& e : G.edges())
        edge_min_heap.push(e);

    auto N = G.vertices();
    Disjoint dset(N);
    for (unsigned i = 0; i < N; i++)
        dset.make_set(i);

    graph<T> MST(N);
    while (!edge_min_heap.empty()) {
        auto e = edge_min_heap.top();
        edge_min_heap.pop();

        if (dset.find(e.src) != dset.find(e.dst)) {
            MST.add_edge(edge<T>{e.src, e.dst, e.weight});
            dset.union_sets(e.src, e.dst);
        }
    }
    return MST;
}

int main() {
    using T = unsigned;

    graph<T> G(9);
    map<unsigned, vector<pair<unsigned, T>>> edge_map;
    edge_map[1] = { {2,2},{5,3} };
    edge_map[2] = { {1,2},{5,5},{4,1} };
    edge_map[3] = { {4,2},{7,3} };
    edge_map[4] = { {2,1},{3,2},{5,2 },{6,4},{8,5} };
    edge_map[5] = { {1,3},{2,5},{4,2},{8,3} };
    edge_map[6] = { {4,4},{7,4},{8,1} };
    edge_map[7] = { {3,3},{6,4} };
    edge_map[8] = { {4,5},{5,3},{6,1} };

    for (auto& i : edge_map)
        for (auto& j : i.second)
            G.add_edge(edge<T>{i.first, j.first, j.second});

    cout << "[입력 그래프]" << '\n';
    cout << G << '\n';

    graph<T> MST = mst(G);
    cout << "[최소 신장 트리]" << '\n';
    cout << MST;
}
