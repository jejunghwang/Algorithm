#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

inline int hungarian(const vector<vector<int>>& weight, int num) {
    vector<int> u(num + 1, 0), v(num + 1, 0), p(num + 1, 0), way(num + 1, 0);
    for (int i = 1; i <= num; ++i) {
        vector<int> minv(num + 1, 99999);
        vector<bool> visited(num + 1, false);
        int j0 = 0;
        p[0] = i;
        do {
            visited[j0] = true;
            int i0 = p[j0], delta = 99999, j1 = 0;
            for (int j = 1; j <= num; ++j) {
                if (!visited[j]) {
                    int cur = weight[i0][j] - u[i0] - v[j];
                    if (cur < minv[j]) {
                        minv[j] = cur;
                        way[j] = j0;
                    }
                    if (minv[j] < delta) {
                        delta = minv[j];
                        j1 = j;
                    }
                }
            }
            for (int j = 0; j <= num; ++j) {
                if (visited[j]) {
                    u[p[j]] += delta;
                    v[j] -= delta;
                }
                else {
                    minv[j] -= delta;
                }
            }
            j0 = j1;
        } while (p[j0] != 0);

        do {
            int j1 = way[j0];
            p[j0] = p[j1];
            j0 = j1;
        } while (j0 != 0);
    }

    return -v[0];
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int num;
    cin >> num;
    vector<vector<int>> weight(num + 1, vector<int>(num + 1, 0));
    for (int i = 1; i <= num; i++) {
        for (int j = 1; j <= num; j++) {
            cin >> weight[i][j];
        }
    }

    int minCost = hungarian(weight, num);
    cout << minCost;
}
